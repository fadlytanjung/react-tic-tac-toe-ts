{"ast":null,"code":"import _toConsumableArray from \"/home/fadly/development/projects/react-tic-tac-toe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/fadly/development/projects/react-tic-tac-toe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport default _s(function () {\n  _s();\n\n  var _useState = useState(Array(9).fill(\"\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      board = _useState2[0],\n      setBoard = _useState2[1];\n\n  var _useState3 = useState(\"X\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      turn = _useState4[0],\n      setTurn = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      winner = _useState6[0],\n      setWinner = _useState6[1];\n\n  var _useState7 = useState(\"created\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      status = _useState8[0],\n      setStatus = _useState8[1];\n\n  var _useState9 = useState([\"\", \"\"]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      players = _useState10[0],\n      setPlayers = _useState10[1];\n\n  useEffect(function () {\n    if (status !== \"started\") return;\n    var winningPositions = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    var winningPositionsIndex = 0;\n    var winner = null;\n\n    var _loop = function _loop() {\n      var boardPositionsToCheck = winningPositions[winningPositionsIndex];\n      var boardValuesToCkeck = boardPositionsToCheck.map(function (index) {\n        return board[index];\n      });\n      var checkingValue = boardValuesToCkeck[0];\n      var isFinished = boardValuesToCkeck.every(function (value) {\n        return value === checkingValue && checkingValue;\n      });\n      winner = !isFinished ? null : checkingValue;\n      winningPositionsIndex++;\n    };\n\n    while (winningPositionsIndex < winningPositions.length && !winner) {\n      _loop();\n    }\n\n    if (winner) {\n      setWinner(winner === \"X\" ? players[0] : players[1]);\n      setStatus(\"finished\");\n      return;\n    }\n\n    setStatus(board.filter(function (value) {\n      return !value;\n    }).length ? \"started\" : \"finished\");\n  }, [board, players, status]);\n\n  var handleClick = function handleClick(index) {\n    if (index < 0 || index > 9 || winner) return;\n\n    var newBoard = _toConsumableArray(board);\n\n    newBoard.splice(index, 1, turn);\n    setBoard(newBoard);\n    var newTurn = turn === \"X\" ? \"O\" : \"X\";\n    setTurn(newTurn);\n  };\n\n  var handleStart = function handleStart(players) {\n    setPlayers(players);\n    setTurn(\"X\");\n    setStatus(\"started\");\n  };\n\n  var handleRestart = function handleRestart() {\n    setBoard(Array(9).fill(\"\"));\n    setWinner(\"\");\n    setStatus(\"created\");\n  };\n\n  return {\n    board: board,\n    status: status,\n    winner: winner,\n    handleClick: handleClick,\n    handleRestart: handleRestart,\n    handleStart: handleStart\n  };\n}, \"cLey08fzCRjLkOxPrPbvZ1bqaG8=\");","map":{"version":3,"sources":["/home/fadly/development/projects/react-tic-tac-toe/src/hooks/useTicTacToe.ts"],"names":["useState","useEffect","Array","fill","board","setBoard","turn","setTurn","winner","setWinner","status","setStatus","players","setPlayers","winningPositions","winningPositionsIndex","boardPositionsToCheck","boardValuesToCkeck","map","index","checkingValue","isFinished","every","value","length","filter","handleClick","newBoard","splice","newTurn","handleStart","handleRestart"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\ninterface ReturnValue {\r\n  board: string[];\r\n  status: string;\r\n  winner: string | null;\r\n  handleClick: (index: number) => void;\r\n  handleRestart: () => void;\r\n  handleStart: (players: string[]) => void;\r\n}\r\nexport default (): ReturnValue => {\r\n  const [board, setBoard] = useState(Array(9).fill(\"\"));\r\n  const [turn, setTurn] = useState(\"X\");\r\n  const [winner, setWinner] = useState<string | null>(null);\r\n  const [status, setStatus] = useState(\"created\");\r\n  const [players, setPlayers] = useState([\"\", \"\"]);\r\n\r\n  useEffect(() => {\r\n    if (status !== \"started\") return;\r\n    const winningPositions = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    let winningPositionsIndex = 0;\r\n    let winner: string | null = null;\r\n    while (winningPositionsIndex < winningPositions.length && !winner) {\r\n      const boardPositionsToCheck = winningPositions[winningPositionsIndex];\r\n      const boardValuesToCkeck = boardPositionsToCheck.map(\r\n        (index) => board[index]\r\n      );\r\n      const checkingValue = boardValuesToCkeck[0];\r\n      const isFinished = boardValuesToCkeck.every(\r\n        (value) => value === checkingValue && checkingValue\r\n      );\r\n      winner = !isFinished ? null : checkingValue;\r\n      winningPositionsIndex++;\r\n    }\r\n    if (winner) {\r\n      setWinner(winner === \"X\" ? players[0] : players[1]);\r\n      setStatus(\"finished\");\r\n      return;\r\n    }\r\n    setStatus(board.filter((value) => !value).length ? \"started\" : \"finished\");\r\n  }, [board, players, status]);\r\n\r\n  const handleClick = (index: number): void => {\r\n    if (index < 0 || index > 9 || winner) return;\r\n    const newBoard = [...board];\r\n    newBoard.splice(index, 1, turn);\r\n    setBoard(newBoard);\r\n    const newTurn = turn === \"X\" ? \"O\" : \"X\";\r\n    setTurn(newTurn);\r\n  };\r\n  const handleStart = (players: string[]) => {\r\n    setPlayers(players);\r\n    setTurn(\"X\");\r\n    setStatus(\"started\");\r\n  };\r\n  const handleRestart = () => {\r\n    setBoard(Array(9).fill(\"\"));\r\n    setWinner(\"\");\r\n    setStatus(\"created\");\r\n  };\r\n\r\n  return { board, status, winner, handleClick, handleRestart, handleStart };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}